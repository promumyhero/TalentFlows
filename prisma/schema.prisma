// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  userType       UserType?
  onBoardingComplete Boolean @default(false)
 
  Company        Company?
  JobSeeker      JobSeeker?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  company
  jobSeeker
}

model Company {
  id            String          @id @default(cuid())
  name          String
  location      String
  about         String
  logo          String
  website       String
  xAccount      String?
  
  PostJobs      PostJob[]

  user          User @relation(fields: [userId], references: [id])
  userId        String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobSeeker {
  id            String          @id @default(cuid())

  name          String
  about         String
  resume        String

  user          User @relation(fields: [userId], references: [id])
  userId        String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model PostJob {
  id            String          @id @default(cuid())
  jobTitle      String
  employementType String
  location      String
  salaryFrom        Int
  salaryTo        Int
  jobDescription String
  listingDuration Int
  benefits        String[]
  
  status        JobStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company Company? @relation(fields: [companyId], references: [id])
  companyId String
}

enum JobStatus {
  DRAFT
  ACTIVE
  EXPIRED
}